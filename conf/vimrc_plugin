" PLUGIN VIMRC CONTENT
call plug#begin()

filetype plugin indent on

Plug 'sheerun/vim-polyglot' " Better Syntax Highlighting
Plug 'dikiaap/minimalist' " Colorscheme
Plug 'patstockwell/vim-monokai-tasty' " Colorscheme
Plug 'junegunn/fzf' " Fuzzyfinder plugin for VIM
" FZF Remap
nmap <C-P> :Files<CR>z.
command F Files
Plug 'itchyny/lightline.vim' " Status bar 
" Lightline fix
set laststatus=2
let g:lightline = {
      \ 'colorscheme': 'monokai_tasty',
        \ 'component': {
        \   'tagbar': '%{tagbar#currenttag("[%s]", "")}',
        \ },
      \ }

Plug 'majutsushi/tagbar' " open tags in window w/ ctrl-t


"TagBar Remap
map <C-t> :TagbarToggle<CR>
command T TagbarOpen<Space>j
let g:tagbar_compact = 1

Plug 'jiangmiao/auto-pairs' " Insert or delete brackets, parens, quotes
Plug 'junegunn/vim-peekaboo' " Open peak at registers
Plug 'easymotion/vim-easymotion' " J or K to open key words to jump to
" Easymotion keymaps
map <Leader> <Plug>(easymotion-prefix)
nmap J <Plug>(easymotion-bd-w)
nmap K <Plug>(easymotion-overwin-w)

Plug 'vim-scripts/ZoomWin' " ctrl-o to zoom in on current pane
Plug 'junegunn/goyo.vim' " :G to remove distractions and focus pane
let g:goyo_width=120
function! Numgoyo()
    :Goyo
    :set number
    :set relativenumber
endfunction

"" Goyo Remap
command G :call Numgoyo()

Plug 'wesQ3/vim-windowswap' " leader-w on pane, leader-w on another, swap panes
Plug 'kana/vim-textobj-user' " make functions object to work with
Plug 'maralla/completor.vim' " asynchronous completion for vim8
Plug 'dense-analysis/ale' " Linter for vim
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'javascript': ['eslint'],
\   'python': ['add_blank_lines_for_python_control_statements', 'autopep8'],
\}

let g:ale_linters = {
\    'cpp': [],
\    'c': [],
\}

Plug 'mhinz/vim-signify' "show git differences
Plug 'ctrlpvim/ctrlp.vim' " fuzzy find files
Plug 'keith/swift.vim' " File type and syntax for swift
Plug 'vim-syntastic/syntastic'
Plug 'ludovicchabant/vim-gutentags' " Handle ctags smarter

Plug 'scrooloose/nerdtree' " File tree in nerdtree
command Tog :NERDTreeToggle

Plug 'neoclide/coc.nvim', {'branch': 'release'} " intellisense engine for vim8
" coc config
let g:coc_global_extensions = [
  \ 'coc-snippets',
  \ 'coc-pairs',
  \ 'coc-tsserver',
  \ 'coc-eslint', 
  \ 'coc-prettier', 
  \ 'coc-json', 
  \ ]


let g:prettier#quickfix_enabled = 0
let g:prettier#quickfix_auto_focus = 0
 " prettier command for coc
command! -nargs=0 Prettier :CocCommand prettier.formatFile


" Tpope Plugins
Plug 'tpope/vim-surround' " vim verb on surrouding operators
Plug 'tpope/vim-repeat' " Add plugin support for . operator
Plug 'tpope/vim-commentary' " gc is now verb, gc3j comment out 3 lines down
" Commentary Changes
autocmd FileType c setlocal commentstring=//\ %s


Plug 'tpope/vim-abolish' " add :%Subvert to change case, i.e. CHILD/ADULT -> cHiLd -> aDuLt
Plug 'tpope/vim-unimpaired' " Add extra operators to [
Plug 'tpope/vim-tbone' " tmux bidnings for vim

call plug#end()

" Color scheme things
let g:solarized_termcolors=256
let g:palenight_terminal_italic=1
let g:palenight_termcolors=256

syntax enable
set background=dark

" SET COLORSCHEME
" it's worth seeint if lightline (bar at bottom) supports the theme
" let g:lightline.colorscheme = 'solarized'
let g:lightline.colorscheme = 'palenight'
"colorscheme vim-monokai-tasty
colorscheme palenight
" colorscheme solarized
